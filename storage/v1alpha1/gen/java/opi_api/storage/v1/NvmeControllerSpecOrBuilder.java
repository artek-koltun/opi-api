// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_nvme.proto

package opi_api.storage.v1;

public interface NvmeControllerSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.NvmeControllerSpec)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * subsystem controller id range: 0 to 65535.
   * must not be reused under the same subsystem
   * </pre>
   *
   * <code>optional int32 nvme_controller_id = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the nvmeControllerId field is set.
   */
  boolean hasNvmeControllerId();
  /**
   * <pre>
   * subsystem controller id range: 0 to 65535.
   * must not be reused under the same subsystem
   * </pre>
   *
   * <code>optional int32 nvme_controller_id = 1 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The nvmeControllerId.
   */
  int getNvmeControllerId();

  /**
   * <pre>
   * transport type
   * </pre>
   *
   * <code>.opi_api.storage.v1.NvmeTransportType trtype = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The enum numeric value on the wire for trtype.
   */
  int getTrtypeValue();
  /**
   * <pre>
   * transport type
   * </pre>
   *
   * <code>.opi_api.storage.v1.NvmeTransportType trtype = 2 [(.google.api.field_behavior) = REQUIRED];</code>
   * @return The trtype.
   */
  opi_api.storage.v1.NvmeTransportType getTrtype();

  /**
   * <pre>
   * Required for pcie transport type to expose emulated Pcie Nvme controllers to Host
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the pcieId field is set.
   */
  boolean hasPcieId();
  /**
   * <pre>
   * Required for pcie transport type to expose emulated Pcie Nvme controllers to Host
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The pcieId.
   */
  opi_api.storage.v1.PciEndpoint getPcieId();
  /**
   * <pre>
   * Required for pcie transport type to expose emulated Pcie Nvme controllers to Host
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 3 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  opi_api.storage.v1.PciEndpointOrBuilder getPcieIdOrBuilder();

  /**
   * <pre>
   * Required for Nvme over fabrics transport types to create
   * Nvme over Fabrics controllers to expose for example local SSDs over a network
   * </pre>
   *
   * <code>.opi_api.storage.v1.FabricsEndpoint fabrics_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the fabricsId field is set.
   */
  boolean hasFabricsId();
  /**
   * <pre>
   * Required for Nvme over fabrics transport types to create
   * Nvme over Fabrics controllers to expose for example local SSDs over a network
   * </pre>
   *
   * <code>.opi_api.storage.v1.FabricsEndpoint fabrics_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The fabricsId.
   */
  opi_api.storage.v1.FabricsEndpoint getFabricsId();
  /**
   * <pre>
   * Required for Nvme over fabrics transport types to create
   * Nvme over Fabrics controllers to expose for example local SSDs over a network
   * </pre>
   *
   * <code>.opi_api.storage.v1.FabricsEndpoint fabrics_id = 4 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  opi_api.storage.v1.FabricsEndpointOrBuilder getFabricsIdOrBuilder();

  /**
   * <pre>
   * maximum number of host submission queues allowed.
   * If not set, the xPU will provide a default.
   * </pre>
   *
   * <code>int32 max_nsq = 5 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The maxNsq.
   */
  int getMaxNsq();

  /**
   * <pre>
   * maximum number of host completion queues allowed.
   * If not set, the xPU will provide a default.
   * </pre>
   *
   * <code>int32 max_ncq = 6 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The maxNcq.
   */
  int getMaxNcq();

  /**
   * <pre>
   * maximum number of submission queue entries per submission queue, as a power of 2.
   * default value as per spec is 6
   * </pre>
   *
   * <code>int32 sqes = 7 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The sqes.
   */
  int getSqes();

  /**
   * <pre>
   * maximum number of completion queue entries per completion queue, as a power of 2.
   * default value as per spec is 4
   * </pre>
   *
   * <code>int32 cqes = 8 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The cqes.
   */
  int getCqes();

  /**
   * <pre>
   * maximum Number of namespaces that will be provisioned under
   * the controller.
   * </pre>
   *
   * <code>int32 max_namespaces = 9 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The maxNamespaces.
   */
  int getMaxNamespaces();

  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the minLimit field is set.
   */
  boolean hasMinLimit();
  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The minLimit.
   */
  opi_api.storage.v1.QosLimit getMinLimit();
  /**
   * <pre>
   * min QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 10 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMinLimitOrBuilder();

  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return Whether the maxLimit field is set.
   */
  boolean hasMaxLimit();
  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
   * @return The maxLimit.
   */
  opi_api.storage.v1.QosLimit getMaxLimit();
  /**
   * <pre>
   * max QoS limits for the controller
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 11 [(.google.api.field_behavior) = OPTIONAL];</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMaxLimitOrBuilder();

  public opi_api.storage.v1.NvmeControllerSpec.EndpointCase getEndpointCase();
}
