// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frontend_virtio_blk.proto

package opi_api.storage.v1;

public interface VirtioBlkOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opi_api.storage.v1.VirtioBlk)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return Whether the id field is set.
   */
  boolean hasId();
  /**
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   * @return The id.
   */
  opi_api.common.v1.ObjectKey getId();
  /**
   * <code>.opi_api.common.v1.ObjectKey id = 1;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getIdOrBuilder();

  /**
   * <pre>
   * The PCI endpoint where this device should appear
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 2;</code>
   * @return Whether the pcieId field is set.
   */
  boolean hasPcieId();
  /**
   * <pre>
   * The PCI endpoint where this device should appear
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 2;</code>
   * @return The pcieId.
   */
  opi_api.storage.v1.PciEndpoint getPcieId();
  /**
   * <pre>
   * The PCI endpoint where this device should appear
   * </pre>
   *
   * <code>.opi_api.storage.v1.PciEndpoint pcie_id = 2;</code>
   */
  opi_api.storage.v1.PciEndpointOrBuilder getPcieIdOrBuilder();

  /**
   * <pre>
   * The back/middle-end volume to back this controller
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey volume_id = 3;</code>
   * @return Whether the volumeId field is set.
   */
  boolean hasVolumeId();
  /**
   * <pre>
   * The back/middle-end volume to back this controller
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey volume_id = 3;</code>
   * @return The volumeId.
   */
  opi_api.common.v1.ObjectKey getVolumeId();
  /**
   * <pre>
   * The back/middle-end volume to back this controller
   * </pre>
   *
   * <code>.opi_api.common.v1.ObjectKey volume_id = 3;</code>
   */
  opi_api.common.v1.ObjectKeyOrBuilder getVolumeIdOrBuilder();

  /**
   * <code>int64 max_io_qps = 4;</code>
   * @return The maxIoQps.
   */
  long getMaxIoQps();

  /**
   * <pre>
   * min QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 5;</code>
   * @return Whether the minLimit field is set.
   */
  boolean hasMinLimit();
  /**
   * <pre>
   * min QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 5;</code>
   * @return The minLimit.
   */
  opi_api.storage.v1.QosLimit getMinLimit();
  /**
   * <pre>
   * min QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit min_limit = 5;</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMinLimitOrBuilder();

  /**
   * <pre>
   * max QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 6;</code>
   * @return Whether the maxLimit field is set.
   */
  boolean hasMaxLimit();
  /**
   * <pre>
   * max QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 6;</code>
   * @return The maxLimit.
   */
  opi_api.storage.v1.QosLimit getMaxLimit();
  /**
   * <pre>
   * max QoS limits for the virtio-blk device
   * </pre>
   *
   * <code>.opi_api.storage.v1.QosLimit max_limit = 6;</code>
   */
  opi_api.storage.v1.QosLimitOrBuilder getMaxLimitOrBuilder();
}
